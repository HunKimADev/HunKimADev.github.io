I"4<p>우리는 흔히 데이터를 저장하기 위해서 두가지 유형의 데이터베이스를 사용합니다.</p>

<p>RDB와 NoSQL이죠.</p>

<p>이번 포스팅에서는 그 차이에 대해서 알아보도록 할텐데요.</p>

<p>먼저 오늘은 RDBMS에 대해 알아보도록 하겠습니다.</p>

<p><br /></p>

<h3 id="rdbms란">RDBMS란?</h3>
<p><strong>R</strong>elational <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem의 약자로 관계형 데이터베이스 관리 시스템을 말합니다.
관계형 데이터베이스는 각 역할 별로 테이블을 만들고 관련된 데이터를 정해진 규격에 따라 저장하며, 여러 테이블들을 연결하기 위해 ‘관계’를 사용하는 데이터베이스입니다.</p>

<p><img src="https://sanghun-blog-asset.s3.ap-northeast-2.amazonaws.com/rdb.png" alt="rdb" /></p>

<p>위의 예시처럼 각 테이블의 기록(record)마다 고유한 아이디(Primary Key)를 가지고 있고 다른 테이블에서 해당 기록의 정보가 필요할 때에는 정보를 중복 입력하는 것이 아니라, 해당 기록의 Primary Key를 외래 키(Foreign Key)로써 참조하여 테이블과 테이블을 연결해주는 것이 특징입니다.</p>

<p>또한 데이터를 정해진 규격에 따라 저장하기 때문에 위 예시에서 각 테이블의 Field 옆에 명시 된 데이터 타입 이외의 정보는 저장할 수 없습니다.</p>

<p>RDBMS에서는 데이터의 생성, 수정, 삭제, 검색을 위해 SQL (<strong>S</strong>tructured <strong>Q</strong>uery <strong>L</strong>anguage)이라는 쿼리 언어를 사용합니다.</p>

<p><br /></p>

<blockquote>
  <p>SQL 예시</p>
</blockquote>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">users</span><span class="p">.</span><span class="n">username</span><span class="p">,</span> <span class="n">orders</span><span class="p">.</span><span class="n">id</span> <span class="k">as</span> <span class="n">order_number</span><span class="p">,</span> <span class="n">orders</span><span class="p">.</span><span class="nb">date</span> <span class="k">as</span> <span class="n">order_date</span><span class="p">,</span> 
<span class="n">category</span><span class="p">.</span><span class="n">name</span> <span class="k">as</span> <span class="n">category</span><span class="p">,</span> <span class="n">products</span><span class="p">.</span><span class="n">name</span> <span class="k">as</span> <span class="n">product_name</span><span class="p">,</span> <span class="n">order_products</span><span class="p">.</span><span class="n">quantity</span>
<span class="k">FROM</span> <span class="n">users</span> 
<span class="k">JOIN</span> <span class="n">orders</span> <span class="k">ON</span> <span class="n">orders</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">users</span><span class="p">.</span><span class="n">id</span>
<span class="k">JOIN</span> <span class="n">order_products</span> <span class="k">ON</span> <span class="n">orders</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">order_products</span><span class="p">.</span><span class="n">order_id</span>
<span class="k">JOIN</span> <span class="n">products</span> <span class="k">ON</span> <span class="n">order_products</span><span class="p">.</span><span class="n">product_id</span> <span class="o">=</span> <span class="n">products</span><span class="p">.</span><span class="n">id</span>
<span class="k">JOIN</span> <span class="n">category</span> <span class="k">ON</span> <span class="n">products</span><span class="p">.</span><span class="n">category_id</span> <span class="o">=</span> <span class="n">category</span><span class="p">.</span><span class="n">id</span>
<span class="k">WHERE</span> <span class="n">users</span><span class="p">.</span><span class="n">username</span> <span class="o">=</span> <span class="s1">'sanghun'</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">orders</span><span class="p">.</span><span class="nb">date</span> <span class="k">DESC</span>
</code></pre></div></div>
<p><br /></p>

<blockquote>
  <p>결과 예시</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th style="text-align: center">username</th>
      <th style="text-align: center">order_number</th>
      <th style="text-align: center">order_date</th>
      <th style="text-align: center">category</th>
      <th style="text-align: center">product_name</th>
      <th style="text-align: center">quantity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">sanghun</td>
      <td style="text-align: center">9</td>
      <td style="text-align: center">2022-01-19</td>
      <td style="text-align: center">상의</td>
      <td style="text-align: center">무지 반팔티 - 화이트</td>
      <td style="text-align: center">3</td>
    </tr>
    <tr>
      <td style="text-align: center">sanghun</td>
      <td style="text-align: center">9</td>
      <td style="text-align: center">2022-01-19</td>
      <td style="text-align: center">하의</td>
      <td style="text-align: center">기본 와이드 슬랙스</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">sanghun</td>
      <td style="text-align: center">8</td>
      <td style="text-align: center">2021-01-11</td>
      <td style="text-align: center">아우터</td>
      <td style="text-align: center">양털 후리스</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">sanghun</td>
      <td style="text-align: center">8</td>
      <td style="text-align: center">2021-01-11</td>
      <td style="text-align: center">모자</td>
      <td style="text-align: center">캐릭터 비니</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td style="text-align: center">…</td>
      <td style="text-align: center">…</td>
      <td style="text-align: center">…</td>
      <td style="text-align: center">…</td>
      <td style="text-align: center">…</td>
      <td style="text-align: center">…</td>
    </tr>
  </tbody>
</table>

<h4 id="rdbms의-장점">RDBMS의 장점</h4>
<ul>
  <li>데이터의 규격화, 유일화 (안정성 장, 그러나 유연성 x 단)</li>
  <li>스키마의 변경이 어려움</li>
  <li>테이블이 많아질 경우 (서비스의 규모가 커질 경우) 다수의 Join문으로 인해 쿼리문이 매우 복잡할 수 있음 단</li>
  <li>수정이 잦은 데이터 ok</li>
  <li>수직적 확장만 가능 (비용이 비쌈) 단</li>
</ul>

<h4 id="rdbms의-단점">RDBMS의 단점</h4>
<ul>
  <li>초기 설계비용이 크다: 데이터베이스의 스키마를 짤 때에 테이블의 구조와 관계 각 field의 데이터타입까지 세세하게 설계해야 하기 때문에 초기에 드는 설계 비용이 크다.</li>
  <li>구조를 한번 정한 뒤엔 데이터베이스의 <strong>구조를 변경하기 어렵다</strong>.</li>
  <li>서비스의 규모가 커질 경우 <strong>JOIN문이 복잡</strong>해질 수 있다.</li>
  <li>RDBMS의 특성상 DB의 확장이 필요할 시 <strong>수직적 확장</strong>만 가능하다.</li>
</ul>

<p><strong>*수직적 확장과 수평적 확장</strong></p>
:ET