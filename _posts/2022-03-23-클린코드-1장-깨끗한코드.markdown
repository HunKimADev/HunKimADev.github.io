---
layout: post
title: "클린코드 - 1장 깨끗한 코드"
categories: books
---

# **1장 - 깨끗한 코드**


<br>

### **나쁜코드**

<br>

***우리는 종종 급해서, 시간을 맞추느라, 코드를 다듬느라 시간을 보내다가, 상사한테 욕 먹을까봐, 지겨워서 빨리 끝내려고, 다른업무가 너무 밀려 후딱 해치우고 밀린 업무로 넘어가려고.. 나쁜코드를 양산한다.***

<br>

당장 눈앞에 있는 기능을 개발하는 데에는 나쁜 코드를 양산하는게 빠를 수 있겠지만, 프로그램의 규모가 커지면서 쌓인 나쁜코드만큼 생산성이 떨어지게 되고, 결국 생산성은 0에 수렴하게 된다. 결국 새로운 팀을 구성해 재설계를 진행하게 되지만 재설계팀은 현재 개발된 기능 뿐만아니라 앞으로 개발되는 새로운 기능들까지도 따라잡아야 한다. 저자인 밥아저씨는 재설계팀이 따라잡는데 10년이 넘게 걸리는 경우도 보았다고 한다.

결국 처음 개발할 때부터 시간이 조금 더 들더라도 나쁜 코드를 피하는 것이 장기적인 생산성에서 좋을 수 밖에 없다. 

<br>

***빨리 가려고 나쁜코드를 양산하다 보면 생산성 저하로 기한을 맞추지 못한다. 기한을 맞추는 유일한 방법, 빨리 가는 유일한 방법은 언제나 코드를 최대한 깨끗하게 유지하는 습관이다.***

<br>

그렇다면 깨끗한 코드란 무엇일까?

<br>

### **깨끗한 코드**

<br>

밥아저씨는 이 분야의 다양한 고인물들에게서 깨끗한 코드에 대한 생각을 모아보았다고 한다. 여기서는 키워드만 간단하게 정리해보려고 한다.

<br>

> **Bjarne Stroustrup / C++창시자이자 C++ Programming Language 저자**
> - 우아하고 효율적인 코드
> - 의존성을 최대로 줄인 코드
> - 간단한 논리
> - 명백한 전략에 의거한 오류처리
> - 한가지를 제대로 처리하는 코드

<br>

> **Grady Booch / Object Oriented Analysis and Design with Application 저자**
> - 단순하고 직접적이다
> - 잘 쓴 문장처럼 읽힌다
> - 설계자의 의도를 숨기지 않는다
> - 명쾌한 추상화와 단순한 제어문으로 가득하다

<br>

> **‘Big’ Dave Thomas / OTI창립자이자 이클립스 전략의 대부**
> - 작성자가 아닌 사람도 읽기 쉽고 고치기 쉽다.
> - Unit test case와 Acceptance test case가 존재한다
> - 의미있는 이름이 붙는다
> - 의존성은 최소이며 각 의존성을 명확히 정의한다
> - API는 명확하며 최소로 줄인다
> - 문학적으로 표현해야한다

<br>

> **Michael Feathers / Working Effectively with Legacy Code 저자**
> - 누군가 주의 깊게 짰다는 느낌을 준다.
> - 딱히 손댈 곳이 없다
> - 고칠 궁리를 하다보면 언제나 제자리로 돌아온다.

<br>

> **Ron Jeffries / Extreme Programming Installed와 Extreme Programming Adventure in C# 저자**
> - 모든 테스트를 통과한다
> - 중복이 없다
> - 시스템 내 모든 설계 아이디어를 표현한다
> - 클래스, 메서드, 함수 등을 최대한 줄인다

<br>

> **Ward Cunningham / 위키 창시자, 피트 창시자, 익스트림프로그래밍 공동창시자, …**
> - 짐작했던 기능을 그대로 수행한다
> - 그 문제를 풀기위한 언어처럼 보인다


<br>

> **Robert C. Martin / 엉클 밥**
> - 이 책에서 설명할 거니까 책을 보세요


이 고인물들이 이야기하는 깨끗한 코드들의 공통된 부분을 정리하자면
  
#### **간단한 논리**로 의도한 **한가지 기능을 제대로 처리**하면서 **의미 있는 이름**으로 무엇을 위한 코드인지 **의도를 명확하게** 알 수 있게 표현한 코드들로 시스템 내 **모든 설계 아이디어**를 **최소한의 의존성**으로 구현한 프로그램이다.

<br>

### **밥아저씨의 지켜야 할 교훈과 기법**

<br>

아래는 밥아저씨가 오랫동한 고민하고 숙고한 교훈과 기법이라고 한다.

<br>

> **우리는 저자다**

우리는 코드의 저자다. 저자에게는 독자와 잘 소통할 책임이 있다. 
새 코드를 짤 때 새 코드를 짜는 시간보다 주변코드를 읽어야 하는 시간이 압도적으로 많기 때문에, 시간이 조금 더 들더라도 읽기 쉬운 코드를 짜면 새 코드를 짜기도 쉽다.


<br>

> **보이스카우트 규칙**

캠핑장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라.
체크아웃 할 때보다 조금 더 깨끗한 코드를 체크인한다면 코드는 절대 나빠지지 않는다.
변수이름 하나를 개선하고, 조금 긴 함수 하나를 분할하고, 약간의 중복을 제거하고, 복잡한 if문 하나를 정리하는 정도면 충분하다.


<br>

> **프리퀄과 원칙**

SOLID를 지킨다
각 원칙의 자세한 내용은 밥아저씨의 다른 저서인 Agile Software Development: Principles, Patterns, and Practices 에 나오니 읽어보시란다.

<br>

다음엔 2장에서 찾아 뵙도록 한다. b